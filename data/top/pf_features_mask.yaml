selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_mask: awkward.JaggedArray.ones_like(part_etarel)
   jet_isTop: label
   jet_isQCD: 1 - label

preprocess:
   ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
   method: auto
   ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
   data_fraction: 0.5

inputs:
   pf_features:
      length: 100
      vars:
         ### [format 1]: var_name (no transformation)
         ### [format 2]: [var_name,
         ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
         ###              multiply_by(optional, default=1),
         ###              clip_min(optional, default=-5),
         ###              clip_max(optional, default=5),
         ###              pad_value(optional, default=0)]
         - part_pt_log
         - part_e_log
         - part_logptrel
         - part_logerel
         - part_deltaR
         - [part_etarel, null]
         - [part_phirel, null]
   pf_mask:
      length: 100
      vars:
         - [part_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [jet_isTop, jet_isQCD]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value:
   #    truth_label: label.argmax(1)

observers:
   - jet_pt
   - jet_eta
   - jet_phi
   - jet_mass
   - n_parts

weights:
