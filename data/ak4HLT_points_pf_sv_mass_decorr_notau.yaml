selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   >-
   (np.abs(jet_hlt_eta)<2.5) & (jet_hlt_pt>=30) & (jet_hlt_pt<=1000) & (event%7!=0) & (jet_hlt_genmatch_pt>0) & (jet_hlt_muflav==0) & (jet_hlt_elflav==0) & (jet_hlt_tauflav==0) &  ~((jet_hlt_tauflav==0) & (np.abs(jet_hlt_pflav)==0) & (jet_hlt_hflav==0)) & ~((jet_hlt_tauflav==0) & (np.abs(jet_hlt_pflav)==4) & (jet_hlt_hflav==0)) & ~((jet_hlt_tauflav==0) & (np.abs(jet_hlt_pflav)==5) & (jet_hlt_hflav==0))

test_time_selection:
   >-
   (np.abs(jet_hlt_eta)<2.5) & (jet_hlt_pt>=30) & (jet_hlt_pt<=1000) & (event%7==0) & (jet_hlt_genmatch_pt>0) & (jet_hlt_muflav==0) & (jet_hlt_elflav==0) & (jet_hlt_tauflav==0) & ~((jet_hlt_tauflav==0) & (np.abs(jet_hlt_pflav)==0) & (jet_hlt_hflav==0)) & ~((jet_hlt_tauflav==0) & (np.abs(jet_hlt_pflav)==4) & (jet_hlt_hflav==0)) & ~((jet_hlt_tauflav==0) & (np.abs(jet_hlt_pflav)==5) & (jet_hlt_hflav==0))

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand_mask: ak.ones_like(jet_hlt_pfcand_deta)
   sv_mask: ak.ones_like(jet_hlt_sv_deta)
   label_b:   (jet_hlt_tauflav==0) & (jet_hlt_hflav==5) 
   label_c:   (jet_hlt_tauflav==0) & (jet_hlt_hflav==4) 
   label_uds: (jet_hlt_tauflav==0) & (jet_hlt_hflav==0) & (np.abs(jet_hlt_pflav)>=0) & (np.abs(jet_hlt_pflav)<4)
   label_g:   (jet_hlt_tauflav==0) & (jet_hlt_hflav==0) & (np.abs(jet_hlt_pflav)==21)

preprocess:
   ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
   method: manual
   ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
   data_fraction:

inputs:
   pf_points:
      length: 50
      vars:
         - [jet_hlt_pfcand_deta, null]
         - [jet_hlt_pfcand_dphi, null]
   pf_features:
      length: 50
      vars:
         ### [format 1]: var_name (no transformation)
         ### [format 2]: [var_name,
         ### subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
         ### multiply_by(optional, default=1),
         ### clip_min(optional, default=-5),
         ### clip_max(optional, default=5),
         ### pad_value(optional, default=0)]
         - [jet_hlt_pfcand_pt_log, 1, 0.5]
         - [jet_hlt_pfcand_energy_log, 1.3, 0.5]
         - [jet_hlt_pfcand_deta, null]
         - [jet_hlt_pfcand_dphi, null]
         - [jet_hlt_pfcand_eta, 0, 0.8]
         - [jet_hlt_pfcand_charge, null]
         - [jet_hlt_pfcand_frompv, 3, 1] # VTX_ass
         - [jet_hlt_pfcand_nlostinnerhits, null]
         - [jet_hlt_pfcand_track_chi2, 5, 0.2]
         - [jet_hlt_pfcand_track_qual, 0, 0.2]
         - [jet_hlt_pfcand_dz, 0, 150]
         - [jet_hlt_pfcand_dzsig, 0, 0.7]
         - [jet_hlt_pfcand_dxy, 0, 270]
         - [jet_hlt_pfcand_dxysig, 1.0]
         - [jet_hlt_pfcand_etarel, 1.5, 0.5]
         - [jet_hlt_pfcand_pperp_ratio, 0, 1]
         - [jet_hlt_pfcand_ppara_ratio, 0, 1]
         - [jet_hlt_pfcand_trackjet_d3d, 0, 90]
         - [jet_hlt_pfcand_trackjet_d3dsig, 0, 0.5]
         - [jet_hlt_pfcand_trackjet_dist, 0, 40]
         - [jet_hlt_pfcand_trackjet_decayL, 0, 65]
         - [jet_hlt_pfcand_npixhits, 0, 0.1]
         - [jet_hlt_pfcand_nstriphits, 0, 0.1]
   pf_mask:
      length: 50
      vars:
         - [pfcand_mask, null]
   sv_points:
      length: 5
      vars:
         - [jet_hlt_sv_deta, null]
         - [jet_hlt_sv_dphi, null]
   sv_features:
      length: 5
      vars:
         - [jet_hlt_sv_pt_log, 4, 0.6]
         - [jet_hlt_sv_mass, 1.2, 0.3]
         - [jet_hlt_sv_deta, null]
         - [jet_hlt_sv_dphi, null]
         - [jet_hlt_sv_eta, 0, 0.8]
         - [jet_hlt_sv_ntrack, 3, 1]
         - [jet_hlt_sv_chi2, 0.8, 0.6]
         - [jet_hlt_sv_dxy, 0.4, 0.25]
         - [jet_hlt_sv_dxysig, 7, 0.02]
         - [jet_hlt_sv_d3d, 0.5, 0.2]
         - [jet_hlt_sv_d3dsig, 7, 0.02]
   sv_mask:
      length: 5
      vars:
         - [sv_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_b, label_c, label_uds, label_g]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value:

targets:
    type: custom
    value:
       target_pt: np.clip(((label_b) | (label_c) | (label_uds) | (label_g))*np.nan_to_num(jet_hlt_genmatch_pt/jet_hlt_pt,nan=0,posinf=0,neginf=0),0.3,2)
    quantile:
       [-1]

observers:
   - event
   - rho
   - npv
   - wgt
   - met
   - sample
   - npu
   - jet_hlt_pt
   - jet_hlt_eta
   - jet_hlt_phi
   - jet_hlt_mass
   - jet_hlt_ncand
   - jet_hlt_hflav
   - jet_hlt_pflav
   - jet_hlt_tauflav
   - jet_hlt_taudecaymode
   - jet_hlt_taucharge
   - jet_hlt_muflav
   - jet_hlt_elflav
   - jet_hlt_genmatch_pt
   - jet_hlt_genmatch_eta
   - jet_hlt_genmatch_phi
   - jet_hlt_genmatch_mass
   - jet_hlt_genmatch_wnu_pt
   - jet_hlt_genmatch_wnu_eta
   - jet_hlt_genmatch_wnu_phi
   - jet_hlt_genmatch_wnu_mass
   - jet_hlt_deepcsv_probb
   - jet_hlt_deepcsv_probc
   - jet_hlt_deepcsv_probudsg
   - jet_hlt_pnethlt_probb
   - jet_hlt_pnethlt_probc
   - jet_hlt_pnethlt_probuds  
   - jet_hlt_pnethlt_probg
   - jet_recomatch_pt
   - jet_recomatch_eta
   - jet_recomatch_phi
   - jet_recomatch_mass
   - jet_recomatch_pnet_probb
   - jet_recomatch_pnet_probc
   - jet_recomatch_pnet_probuds
   - jet_recomatch_pnet_probg
   - jet_taumatch_pt
   - jet_taumatch_eta
   - jet_taumatch_phi
   - jet_taumatch_mass
   - jet_taumatch_decaymode
   - jet_taumatch_charge
   - jet_taumatch_idjet
   - jet_taumatch_dz
   - jet_taumatch_idjet_wp

monitor_variables:

weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      jet_hlt_pt: [30, 38, 48, 60, 76, 97, 122, 154, 195, 246, 311, 393, 496, 627, 792, 1000]
      #jet_hlt_pt: [30, 38, 48, 60, 76, 97, 122, 154, 195, 246, 400, 1000]
      jet_hlt_eta: [-2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5]
   reweight_classes: [label_b, label_c, label_uds, label_g]
   class_weights: [1.5, 1.5, 3, 5]
   reweight_threshold: 15
   reweight_hists:
